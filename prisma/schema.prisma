generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public", "training_management"]
}

model PersonRole {
  id          Int                     @id @default(autoincrement())
  name        String                  @unique
  type        PersonRoleType
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  assignments PersonOnConcentration[]

  @@schema("training_management")
}

model User {
  id                               Int                      @id @default(autoincrement())
  email                            String                   @unique
  password                         String
  name                             String
  createdAt                        DateTime                 @default(now())
  updatedAt                        DateTime                 @updatedAt
  profile                          Profile?
  roles                            UserRole[]
  created_absences                 AbsenceRecord[]          @relation("creator")
  created_competitions             Competition[]            @relation("creator")
  created_competition_participants CompetitionParticipant[] @relation("creator")
  created_concentrations           Concentration[]          @relation("creator")
  created_papers                   Paper[]                  @relation("creator")
  assigned_papers                  PaperOnConcentration[]   @relation("assigner")
  created_persons                  Person[]                 @relation("creator")
  assigned_participants            PersonOnConcentration[]  @relation("assigner")
  created_trainings                Training[]               @relation("creator")
  created_training_participants    TrainingParticipant[]    @relation("creator")
  created_achievements             Achievement[]            @relation("creator")

  @@map("users")
  @@schema("auth")
}

model Profile {
  id      Int     @id @default(autoincrement())
  phone   String?
  address String?
  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id])

  @@schema("auth")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@schema("training_management")
}

model Sport {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]

  @@schema("training_management")
}

model Team {
  id             Int             @id @default(autoincrement())
  sportId        Int
  type           TeamType
  gender         TeamGender      @default(MIXED)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  concentrations Concentration[]
  sport          Sport           @relation(fields: [sportId], references: [id])

  @@unique([sportId, type, gender])
  @@index([sportId])
  @@schema("training_management")
}

model Paper {
  id             Int                    @id @default(autoincrement())
  number         Int?
  code           String?
  publisher      String
  type           String
  content        String
  related_year   Int
  date           DateTime
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  file_name      String?
  file_path      String?
  created_by     Int
  creator        User                   @relation("creator", fields: [created_by], references: [id])
  concentrations PaperOnConcentration[]

  @@unique([number, code])
  @@schema("training_management")
}

model Concentration {
  id              Int                     @id @default(autoincrement())
  teamId          Int
  location        String
  startDate       DateTime
  endDate         DateTime
  note            String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  related_year    Int
  sequence_number Int
  created_by      Int
  room            ManagementRoom
  creator         User                    @relation("creator", fields: [created_by], references: [id])
  team            Team                    @relation(fields: [teamId], references: [id])
  papers          PaperOnConcentration[]
  participants    PersonOnConcentration[]
  trainings       Training[]
  competitionConcentrations CompetitionConcentration[]

  @@index([teamId])
  @@schema("training_management")
}

model Training {
  id               Int                   @id @default(autoincrement())
  location         String
  startDate        DateTime
  endDate          DateTime
  note             String
  concentration_id Int
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  isForeign        Boolean
  created_by       Int
  concentration    Concentration         @relation(fields: [concentration_id], references: [id])
  creator          User                  @relation("creator", fields: [created_by], references: [id])
  participants     TrainingParticipant[]

  @@schema("training_management")
}

model TrainingParticipant {
  participation_id Int
  training_id      Int
  note             String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  created_by       Int
  creator          User                  @relation("creator", fields: [created_by], references: [id])
  participation    PersonOnConcentration @relation(fields: [participation_id], references: [id])
  training         Training              @relation(fields: [training_id], references: [id])

  @@id([participation_id, training_id])
  @@schema("training_management")
}

model PaperOnConcentration {
  paper_id         Int
  concentration_id Int
  assignedAt       DateTime      @default(now())
  assigned_by      Int
  assigner         User          @relation("assigner", fields: [assigned_by], references: [id])
  concentration    Concentration @relation(fields: [concentration_id], references: [id])
  paper            Paper         @relation(fields: [paper_id], references: [id])

  @@id([paper_id, concentration_id])
  @@schema("training_management")
}

model Person {
  id               Int                     @id @default(autoincrement())
  name             String
  name_search      String?                 @db.Text
  identity_number  String?                 @unique
  identity_date    DateTime?
  identity_place   String?
  social_insurance String?                 @unique
  birthday         DateTime?
  phone            String?
  email            String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  gender           Boolean
  created_by       Int
  creator          User                    @relation("creator", fields: [created_by], references: [id])
  participations   PersonOnConcentration[]
  achievements     Achievement[]

  @@index([name_search])
  @@schema("training_management")
}

model Organization {
  id          Int                     @id @default(autoincrement())
  name        String
  type        OrganizationType
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  assignments PersonOnConcentration[]

  @@unique([name, type])
  @@schema("training_management")
}

model PersonOnConcentration {
  id                        Int                      @id @default(autoincrement())
  person_id                 Int
  concentration_id          Int
  role_id                   Int
  note                      String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  organization_id           Int
  assigned_by               Int
  absences                  AbsenceRecord[]
  assigner                  User                     @relation("assigner", fields: [assigned_by], references: [id])
  concentration             Concentration            @relation(fields: [concentration_id], references: [id])
  organization              Organization             @relation(fields: [organization_id], references: [id])
  person                    Person                   @relation(fields: [person_id], references: [id])
  role                      PersonRole               @relation(fields: [role_id], references: [id])
  trainingParticipations    TrainingParticipant[]
  competitionParticipations CompetitionParticipant[]

  @@index([concentration_id])
  @@index([organization_id])
  @@schema("training_management")
}

model AbsenceRecord {
  id               Int                   @id @default(autoincrement())
  participation_id Int
  type             AbsenceType
  startDate        DateTime
  endDate          DateTime
  note             String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  created_by       Int
  creator          User                  @relation("creator", fields: [created_by], references: [id])
  participation    PersonOnConcentration @relation(fields: [participation_id], references: [id])

  @@index([startDate, endDate])
  @@schema("training_management")
}

model Competition {
  id               Int                      @id @default(autoincrement())
  name             String
  location         String
  startDate        DateTime
  endDate          DateTime
  note             String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  isForeign        Boolean
  is_confirmed     Boolean                  @default(false)
  created_by       Int
  creator          User                     @relation("creator", fields: [created_by], references: [id])
  participants     CompetitionParticipant[]
  concentrations   CompetitionConcentration[]
  achievements     Achievement[]

  @@schema("training_management")
}

model CompetitionConcentration {
  competition_id   Int
  concentration_id Int
  createdAt        DateTime      @default(now())
  competition      Competition   @relation(fields: [competition_id], references: [id])
  concentration    Concentration @relation(fields: [concentration_id], references: [id])

  @@id([competition_id, concentration_id])
  @@schema("training_management")
}

model CompetitionParticipant {
  competition_id   Int
  participant_id   Int // Đã có dữ liệu, làm NOT NULL
  note             String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  endDate          DateTime
  startDate        DateTime
  created_by       Int
  competition      Competition           @relation(fields: [competition_id], references: [id])
  creator          User                  @relation("creator", fields: [created_by], references: [id])
  participation    PersonOnConcentration @relation(fields: [participant_id], references: [id])

  @@id([participant_id, competition_id])
  @@schema("training_management")
}

model Achievement {
  id             Int      @id @default(autoincrement())
  person_id      Int
  competition_id Int
  
  // Thông tin nội dung thi đấu
  event_name     String   // "Chạy 100m", "Chạy 200m", "Nhảy cao"
  event_category String?  // "Sprint", "Jump", "Throw" (optional)
  
  // Thành tích cụ thể
  result_value   String   // "11.8", "24.18", "1.85"
  result_unit    String   // "giây", "mét", "kg", "điểm"
  
  // Huy chương/Thứ hạng
  medal_type     String?  // "HCV", "HCB", "HCD"
  rank           Int?     // 1, 2, 3, 4...
  
  // Thông tin bổ sung
  note           String?
  is_record      Boolean  @default(false) // Có phải kỷ lục không
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  created_by     Int
  
  // Relations
  person         Person      @relation(fields: [person_id], references: [id])
  competition    Competition @relation(fields: [competition_id], references: [id])
  creator        User        @relation("creator", fields: [created_by], references: [id])

  @@schema("training_management")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@schema("auth")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  is_admin    Boolean          @default(false)
  permissions RolePermission[]
  users       UserRole[]

  @@schema("auth")
}

model RolePermission {
  role_id       Int
  permission_id Int
  createdAt     DateTime   @default(now())
  permission    Permission @relation(fields: [permission_id], references: [id])
  role          Role       @relation(fields: [role_id], references: [id])

  @@id([role_id, permission_id])
  @@schema("auth")
}

model UserRole {
  role_id   Int
  createdAt DateTime @default(now())
  user_id   Int
  role      Role     @relation(fields: [role_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@id([user_id, role_id])
  @@schema("auth")
}

model sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@schema("public")
}

model schema_migrations {
  version String @id @unique(map: "schema_migrations_version_idx") @db.VarChar(14)

  @@schema("auth")
}

enum PersonRoleType {
  ATHLETE
  COACH
  OTHER
  SPECIALIST

  @@schema("training_management")
}

enum TeamGender {
  MALE
  FEMALE
  MIXED

  @@schema("training_management")
}

enum TeamType {
  JUNIOR
  ADULT
  DISABILITY

  @@schema("training_management")
}

enum ManagementRoom {
  ROOM_1
  ROOM_2
  ROOM_3
  ROOM

  @@schema("training_management")
}

enum OrganizationType {
  PROVINCE
  OTHER

  @@schema("training_management")
}

enum AbsenceType {
  INACTIVE
  LEAVE

  @@schema("training_management")
}
