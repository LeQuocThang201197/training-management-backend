datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public", "training_management", "auth"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enum cho loại vai trò của person
enum PersonRoleType {
  ATHLETE // Vận động viên
  COACH // Huấn luyện viên
  SPECIALIST // Chuyên gia
  OTHER // Khác

  @@schema("training_management")
}

// Role của nhân sự (vai trò trong đợt tập trung)
model PersonRole {
  id          Int                     @id @default(autoincrement())
  name        String                  @unique // Tên vai trò (Vận động viên, Huấn luyện viên, Bác sĩ...)
  type        PersonRoleType // Loại vai trò 
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  assignments PersonOnConcentration[] // Relation với bảng trung gian

  @@schema("training_management")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  roles     UserRole[] 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  profile   Profile?

  // Relations...
  created_papers                   Paper[]                  @relation("creator")
  created_concentrations           Concentration[]          @relation("creator")
  created_trainings                Training[]               @relation("creator")
  created_competitions             Competition[]            @relation("creator")
  created_absences                 AbsenceRecord[]          @relation("creator")
  created_training_participants    TrainingParticipant[]    @relation("creator")
  created_competition_participants CompetitionParticipant[] @relation("creator")
  assigned_papers                  PaperOnConcentration[]   @relation("assigner")
  assigned_participants            PersonOnConcentration[]  @relation("assigner")

  @@schema("auth")
}

model Profile {
  id      Int     @id @default(autoincrement())
  phone   String?
  address String?
  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id])

  @@schema("auth")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@schema("training_management")
}

model Sport {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]

  @@schema("training_management")
}

model Team {
  id             Int             @id @default(autoincrement())
  sportId        Int
  sport          Sport           @relation(fields: [sportId], references: [id])
  type           TeamType
  room           ManagementRoom
  gender         TeamGender      @default(MIXED)
  concentrations Concentration[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([sportId, type, gender])
  @@index([sportId])
  @@schema("training_management")
}

enum TeamGender {
  MALE // Nam
  FEMALE // Nữ
  MIXED // Cả nam và nữ

  @@schema("training_management")
}

enum TeamType {
  JUNIOR // Trẻ
  ADULT // Tuyển
  DISABILITY // Khuyết tật

  @@schema("training_management")
}

enum ManagementRoom {
  ROOM_1 // Vụ 1
  ROOM_2 // Vụ 2
  ROOM_3 // Thể thao cho mọi người

  @@schema("training_management")
}

model Paper {
  id             Int                    @id @default(autoincrement())
  number         Int? // Thêm ? để cho phép null
  code           String? // Thêm ? để cho phép null
  publisher      String
  type           String
  content        String
  related_year   Int
  date           DateTime
  file_name      String? // Tên file gốc
  file_path      String? // Đường dẫn lưu file
  created_by     Int
  creator        User    @relation("creator", fields: [created_by], references: [id])
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  concentrations PaperOnConcentration[] // Relation với bảng trung gian

  @@schema("training_management")
}

model Concentration {
  id              Int                     @id @default(autoincrement())
  teamId          Int // Đội tập trung
  team            Team                    @relation(fields: [teamId], references: [id])
  location        String // Địa điểm tập trung
  related_year    Int // Năm liên quan
  sequence_number Int // Lần thứ mấy trong năm
  startDate       DateTime // Ngày bắt đầu tập trung
  endDate         DateTime // Ngày kết thúc tập trung
  note            String // Ghi chú
  created_by      Int
  creator         User    @relation("creator", fields: [created_by], references: [id])
  trainings       Training[] // Các đợt tập huấn trong thời gian tập trung
  papers          PaperOnConcentration[] // Relation với bảng trung gian
  participants    PersonOnConcentration[] // Thêm relation field này
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  competitions    Competition[] // Thêm opposite relation

  @@index([teamId])
  @@schema("training_management")
}

model Training {
  id               Int                   @id @default(autoincrement())
  location         String // Địa điểm tập huấn
  isForeign        Boolean // true = Nước ngoài, false = Trong nước
  startDate        DateTime // Ngày bắt đầu tập huấn
  endDate          DateTime // Ngày kết thúc tập huấn
  note             String // Ghi chú
  concentration_id Int
  concentration    Concentration         @relation(fields: [concentration_id], references: [id])
  created_by       Int
  creator          User    @relation("creator", fields: [created_by], references: [id])
  participants     TrainingParticipant[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  @@schema("training_management")
}

// Bảng quản lý người tham gia tập huấn
model TrainingParticipant {
  participation_id Int
  training_id      Int
  note             String?
  created_by       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  participation PersonOnConcentration @relation(fields: [participation_id], references: [id])
  training      Training              @relation(fields: [training_id], references: [id])
  creator       User                  @relation("creator", fields: [created_by], references: [id])

  @@id([participation_id, training_id])
  @@schema("training_management")
}

// Bảng trung gian
model PaperOnConcentration {
  paper_id         Int
  concentration_id Int
  assignedAt       DateTime      @default(now())
  assigned_by      Int
  assigner         User          @relation("assigner", fields: [assigned_by], references: [id])
  paper            Paper         @relation(fields: [paper_id], references: [id])
  concentration    Concentration @relation(fields: [concentration_id], references: [id])

  @@id([paper_id, concentration_id])
  @@schema("training_management")
}

model Person {
  id               Int                     @id @default(autoincrement())
  name             String // Tên
  identity_number  String? // Số CCCD/CMND
  identity_date    DateTime? // Ngày cấp CCCD/CMND
  identity_place   String? // Nơi cấp CCCD/CMND
  social_insurance String? // Mã số BHXH
  birthday         DateTime? // Ngày sinh
  gender           Boolean // Giới tính
  phone            String? // Số điện thoại
  email            String? // Email
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  participations   PersonOnConcentration[] // Quan hệ với bảng trung gian

  @@schema("training_management")
}

// Loại đơn vị trực thuộc
enum OrganizationType {
  PROVINCE // Tỉnh/Thành phố
  OTHER // Khác

  @@schema("training_management")
}

// Bảng đơn vị trực thuộc
model Organization {
  id          Int                     @id @default(autoincrement())
  name        String // Tên đơn vị (Hà Nội, TTHL TDTT Quốc gia...)
  type        OrganizationType // Loại đơn vị
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  assignments PersonOnConcentration[] // Relation với bảng trung gian

  @@unique([name, type])
  @@schema("training_management")
}

// Bảng trung gian quản lý người tham gia đợt tập trung
model PersonOnConcentration {
  id                        Int                      @id @default(autoincrement())
  person_id                 Int // ID của người tham gia
  concentration_id          Int // ID của đợt tập trung
  role_id                   Int // ID của vai trò
  organization_id           Int // ID của đơn vị trực thuộc
  note                      String? // Ghi chú (lý do thêm/bớt)
  assigned_by               Int
  assigner                  User                     @relation("assigner", fields: [assigned_by], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  absences                  AbsenceRecord[]
  trainingParticipations    TrainingParticipant[]
  competitionParticipations CompetitionParticipant[]

  // Relations
  person        Person        @relation(fields: [person_id], references: [id])
  concentration Concentration @relation(fields: [concentration_id], references: [id])
  role          PersonRole    @relation(fields: [role_id], references: [id])
  organization  Organization  @relation(fields: [organization_id], references: [id])

  @@index([concentration_id])
  @@index([organization_id])
  @@schema("training_management")
}

// Bảng quản lý vắng mặt (chỉ cho không tham gia và nghỉ phép)
model AbsenceRecord {
  id               Int         @id @default(autoincrement())
  participation_id Int
  type             AbsenceType
  startDate        DateTime
  endDate          DateTime
  note             String?
  created_by       Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  participation PersonOnConcentration @relation(fields: [participation_id], references: [id])
  creator       User                  @relation("creator", fields: [created_by], references: [id])

  @@index([startDate, endDate])
  @@schema("training_management")
}

enum AbsenceType {
  INACTIVE // Không hoạt động (chưa tham gia/tạm dừng/bị loại)
  LEAVE // Nghỉ phép

  @@schema("training_management")
}

// Bảng quản lý giải đấu
model Competition {
  id               Int                      @id @default(autoincrement())
  name             String // Tên giải đấu
  location         String // Địa điểm thi đấu
  isForeign        Boolean // true = Nước ngoài, false = Trong nước
  startDate        DateTime // Ngày bắt đầu
  endDate          DateTime // Ngày kết thúc
  note             String? // Ghi chú
  is_confirmed     Boolean                  @default(false) // Trạng thái xác nhận
  concentration_id Int // ID của đợt tập trung
  created_by       Int
  creator          User                     @relation("creator", fields: [created_by], references: [id])
  concentration    Concentration            @relation(fields: [concentration_id], references: [id])
  participants     CompetitionParticipant[]
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt

  @@index([concentration_id])
  @@schema("training_management")
}

// Bảng quản lý người tham gia thi đấu
model CompetitionParticipant {
  participation_id Int
  competition_id   Int
  note             String?
  startDate        DateTime // Ngày bắt đầu tham gia
  endDate          DateTime // Ngày kết thúc tham gia
  created_by       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  participation PersonOnConcentration @relation(fields: [participation_id], references: [id])
  competition   Competition           @relation(fields: [competition_id], references: [id])
  creator       User                  @relation("creator", fields: [created_by], references: [id])

  @@id([participation_id, competition_id])
  @@schema("training_management")
}
// Thêm các model mới trong schema auth
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique // CREATE_USER, READ_USER...
  description String // Mô tả chi tiết
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@schema("auth")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique // ADMIN, MANAGER...
  description String // Mô tả về role
  is_admin    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@schema("auth")
}

model RolePermission {
  role_id       Int
  permission_id Int
  createdAt     DateTime @default(now())

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@schema("auth")
}

model UserRole {
  user_id   Int
  role_id   Int
  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@schema("auth")
}
